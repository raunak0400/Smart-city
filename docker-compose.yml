version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: smart_city_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: smartcity123
      MONGO_INITDB_DATABASE: smart_city_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - smart_city_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Flask Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart_city_backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - MONGO_URI=mongodb://admin:smartcity123@mongodb:27017/smart_city_db?authSource=admin
      - MONGO_DB_NAME=smart_city_db
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - SECRET_KEY=your-flask-secret-key-change-in-production
      - JWT_ACCESS_TOKEN_EXPIRES=3600
      - GUNICORN_WORKERS=4
      - GUNICORN_BIND=0.0.0.0:5000
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - smart_city_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:5000/api
        - VITE_WS_URL=http://localhost:5000
        - VITE_APP_NAME=Smart City Management Platform
        - VITE_APP_VERSION=1.0.0
        - VITE_ENABLE_ANALYTICS=true
        - VITE_ENABLE_NOTIFICATIONS=true
        - VITE_ENABLE_DARK_MODE=true
    container_name: smart_city_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - smart_city_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: smart_city_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - smart_city_network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local

networks:
  smart_city_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
